---
import '../styles/global.css';
import ProgressBar from '../components/react/ProgressBar.jsx';

export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Gourish Chouhan's personal portfolio - Software Product Engineer passionate about building scalable applications." } = Astro.props;
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="author" content="Gourish Chouhan" />
    <meta name="robots" content="index, follow" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- Preload critical fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  </head>
  
  <body class="min-h-screen">
    <!-- Progress bar -->
    <ProgressBar client:load />
    
    <!-- Modern theme toggle button -->
    <button 
      id="theme-toggle" 
      class="fixed top-4 right-4 z-50 w-12 h-12 rounded-full bg-white/10 dark:bg-black/20 backdrop-blur-lg border border-white/20 dark:border-gray-700/30 shadow-lg hover:shadow-xl transition-all duration-300 group flex items-center justify-center"
      aria-label="Toggle dark mode"
    >
      <div class="relative w-6 h-6">
        <svg id="theme-icon-light" class="absolute inset-0 w-6 h-6 text-gray-800 group-hover:text-gray-900 transition-all duration-300 dark:opacity-0 dark:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
        <svg id="theme-icon-dark" class="absolute inset-0 w-6 h-6 text-yellow-400 group-hover:text-yellow-300 transition-all duration-300 opacity-0 rotate-180 dark:opacity-100 dark:rotate-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
      </div>
    </button>

    <slot />

    <script is:inline>
      // Theme toggle functionality with animations
      const toggle = document.getElementById('theme-toggle');
      const html = document.documentElement;
      
      // Check for saved theme preference or default to 'light'
      const currentTheme = localStorage.getItem('theme') || 'light';
      html.classList.toggle('dark', currentTheme === 'dark');
      
      toggle?.addEventListener('click', () => {
        // Add click animation
        toggle.style.transform = 'scale(0.95)';
        setTimeout(() => {
          toggle.style.transform = 'scale(1)';
        }, 150);
        
        const isDark = html.classList.toggle('dark');
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
      });
      
      // Intersection Observer for scroll animations
      const observeElements = () => {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('is-visible');
              observer.unobserve(entry.target);
            }
          });
        }, { 
          threshold: 0.1,
          rootMargin: '0px 0px -50px 0px'
        });
        
        document.querySelectorAll('.animate-on-scroll').forEach(el => {
          observer.observe(el);
        });
      };
      
      // Initialize on DOM load
      document.addEventListener('DOMContentLoaded', observeElements);
      
      // Smooth scrolling for navigation links
      document.addEventListener('click', (e) => {
        const target = e.target.closest('a[href^="#"]');
        if (target) {
          e.preventDefault();
          const id = target.getAttribute('href').slice(1);
          const element = document.getElementById(id);
          if (element) {
            element.scrollIntoView({ behavior: 'smooth' });
          }
        }
      });
    </script>
  </body>
</html>
